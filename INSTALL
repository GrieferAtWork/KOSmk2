#!/bin/bash --only-for-syntax-highlighting-dont-actually-execute

# === Installing/Building KOS ===
# All paths are absolute to the base of your KOS root path
# (That is the folder this file is located inside of).
# Before staring to follow these instructions, replace all
# occurances of "${PREFIX}" with the absolute name of that path.
# NOTE: This file is _NOT_ a bash scrict.
#       It is only written like one to improve readability,
#       but it should not be executed as such!

# If they don't already exist, create the following folders.
mkdir ${PREFIX}/binutils/bin
mkdir ${PREFIX}/binutils/src




# === DEEMON ===
# Download and install deemon from here "https://github.com/GrieferAtWork/deemon"
# It's an open source scripting language developed by me and used to implement
# a quick build system for compiling KOS's kernel and system libraries (libc, etc.).
# Depending on how you choose to install it, make sure that "deemon" itself
# (Installed to /usr/bin/deemon by default) is located in ${PATH}.
# You should now be able to execute deemon scripts such as "magic.dee"
# (Although you probably should run that one yet...)




# === BINUTILS & GCC ===
# HINT: If at any point you don't know what to do, you may referr to these helpful pages:
#   - http://wiki.osdev.org/GCC_Cross-Compiler
#   - http://wiki.osdev.org/OS_Specific_Toolchain
#   - http://wiki.osdev.org/Hosted_GCC_Cross-Compiler

# Make sure your build environment fulfills all the requirements necessary
# to build BINUTILS and GCC. - A list of all that is necessary can be found here:
#     http://wiki.osdev.org/GCC_Cross-Compiler#Preparing_for_the_build

# Create a fake system-root for GCC to later find KOS's system headers and libraries.
# I used "/opt/kos" for this, but you may choose any path. - In the following part,
# that path will be referred to as "${GCC_PREFIX}"
# NOTE: Using symlinks for this allows you to later change these links as GCC
#       will always be pointed at them (And you probably only want to compile
#       all of binutils and GCC once...)
mkdir ${GCC_PREFIX}
mkdir ${GCC_PREFIX}/usr
ln -s ${PREFIX}/include ${GCC_PREFIX}/usr/include
ln -s ${PREFIX}/bin/libs  ${GCC_PREFIX}/usr/lib

# NOTE: To build (this version of) binutils and gcc, you need the following
#       applications (NOTE: These _EXACT_ version numbers are required!)
#        - "autoconf-2.64"  (https://ftp.gnu.org/gnu/autoconf/)
#        - "automake-1.11.6" (https://ftp.gnu.org/gnu/automake/)
#       Download _THESE_EXACT_VERSIONS_!
# Build & compile autoconf and automake
# NOTE: I use temporary folders in "/opt" that you
#       can delete once binutils and GCC are built
mkdir /opt/build-autoconf-2.64
mkdir /opt/build-automake-1.11.6
# Extract autoconf to "/opt/autoconf-2.64" such that "/opt/autoconf-2.64/configure" exists
# Extract automake to "/opt/automake-1.11.6" such that "/opt/automake-1.11.6/configure" exists
cd /opt/build-autoconf-2.64
../autoconf-2.64/configure
make
make install
cd /opt/build-automake-1.11.6
../automake-1.11.6/configure
make
make install
# Make sure that the following files now exist as links (If they don't
# or are anything else, create a backup and replace them accordingly).
# NOTE: You can delete/restore these files alongside autoconf/automake
#       once BINUTILS and GCC have been created.
ln -s /opt/build-automake-1.11.6/bin/aclocal   /bin/aclocal
ln -s /opt/build-automake-1.11.6/bin/automake  /bin/automake

# Download "binutils-2.27" from "https://ftp.gnu.org/gnu/binutils/"
# Download "gcc-6.2.0" from "https://ftp.gnu.org/gnu/gcc/gcc-6.2.0/"
# HINT: If either links don't work for some reason, just google the names...
# Extract both to "${PREFIX}/binutils/src", such as the following two files exist:
#   - "${PREFIX}/binutils/src/binutils-2.27/configure"
#   - "${PREFIX}/binutils/src/gcc-6.2.0/configure"

# Create the build directories for BINUTILS and GCC
mkdir ${PREFIX}/binutils/build-binutils-i686-kos
mkdir ${PREFIX}/binutils/build-gcc-i686-kos

# >> Adding KOS as a target triplet recognized by BINUTILS and GCC

# Find the line stating "First accept the basic system types."
# In the list below, add at the end, just before the ")":
echo "| -kos*"
vi ${PREFIX}/binutils/src/binutils-2.27/config.sub

# Find the line stating "# START OF targmatch.h"
# Add the following below:
echo <<EOF
  i[3-7]86-*-kos*)
    targ_defvec=i386_elf32_vec
    targ_selvecs="i386_elf32_vec iamcu_elf32_vec i386_pe_vec i386_pei_vec"
    targ64_selvecs="x86_64_elf64_vec x86_64_pe_vec x86_64_pei_vec x86_64_pe_be_vec l1om_elf64_vec k1om_elf64_vec"
    ;;
#ifdef BFD64
  x86_64-*-kos*)
    targ_defvec=x86_64_elf64_vec
    targ_selvecs="x86_64_elf64_vec x86_64_pe_vec x86_64_pei_vec x86_64_pe_be_vec l1om_elf64_vec k1om_elf64_vec i386_pe_vec i386_pei_vec i386_elf32_vec iamcu_elf32_vec"
    want64=true
    ;;
#endif
EOF
vi ${PREFIX}/binutils/src/binutils-2.27/bfd/config.bfd

# In the switch "case ${generic_target} in" add the following case:
echo <<EOF
  i386-*-kos*)			fmt=elf em=linux ;;
EOF
vi ${PREFIX}/binutils/src/binutils-2.27/gas/configure.tgt

# In the switch "case "${targ}" in" accompanied by a comment
# "Please try to keep this table in alphabetic order"
# add the following cases:
echo <<EOF
i[3-7]86-*-kos*)
			targ_emul=elf_i386_kos
			targ_extra_emuls="elf_i386 i386pe i386pep"
			targ64_extra_emuls="elf_x86_64_kos elf_x86_64 i386pe i386pep"
			targ_extra_ofiles="deffilep.o pep-dll.o pe-dll.o"
			;;
x86_64-*-kos*)
			targ_emul=elf_x86_64_kos
			targ_extra_emuls="elf_i386_kos elf_x86_64 elf_i386 i386pep i386pe"
			targ_extra_ofiles="deffilep.o pep-dll.o pe-dll.o"
			;;
EOF
vi ${PREFIX}/binutils/src/binutils-2.27/ld/configure.tgt

# Create the following two files with this content
echo <<EOF
. ${srcdir}/emulparams/elf_i386.sh
GENERATE_SHLIB_SCRIPT=yes
GENERATE_PIE_SCRIPT=yes
EOF
vi ${PREFIX}/binutils/src/binutils-2.27/ld/emulparams/elf_i386_kos.sh
echo <<EOF
. ${srcdir}/emulparams/elf_x86_64.sh
GENERATE_SHLIB_SCRIPT=yes
GENERATE_PIE_SCRIPT=yes
EOF
vi ${PREFIX}/binutils/src/binutils-2.27/ld/emulparams/elf_x86_64_kos.sh

# Edit the LD makefile script:
# add after '	eelf_i386.c \'
echo '	eelf_i386_kos.c \'
# add after '	eelf_x86_64.c \'
echo '	eelf_x86_64_kos.c \'
# add after 'eelf_i386.c: $(srcdir)/emulparams'... (NOTE: Make sure to keep TABS)
echo <<EOF
eelf_i386_kos.c: $(srcdir)/emulparams/elf_i386_kos.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_i386_kos "$(tdir_elf_i386_kos)"
EOF
# add after 'eelf_x86_64.c: $(srcdir)/emulparams'... (NOTE: Make sure to keep TABS)
echo <<EOF
eelf_x86_64_kos.c: $(srcdir)/emulparams/elf_x86_64_kos.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_x86_64_kos "$(tdir_elf_x86_64_kos)"
EOF
vi ${PREFIX}/binutils/src/binutils-2.27/ld/Makefile.am

# Run "/bin/automake" (The link created before):
cd ${PREFIX}/binutils/src/binutils-2.27/ld
/bin/automake

# NOTE: That's all modifications that must be made to BINUTILS. - Now onwards with GCC

# Find the line stating "First accept the basic system types."
# In the list below, add at the end, just before the ")":
echo "| -kos*"
vi ${PREFIX}/binutils/src/gcc-6.2.0/config.sub

# Add to the switch "case ${target} in" with the comment
# "# Common parts for widely ported systems.":
echo <<EOF
*-*-kos*)
  gas=yes
  gnu_ld=yes
  default_use_cxa_atexit=yes
  ;;
EOF
# In the same file, find another "case ${target} in" (Around line 916)
# The first entry should be "aarch64*-*-elf | aarch64*-*-rtems*)".
# Add to this switch:
echo <<EOF
i[34567]86-*-kos*)
    tm_file="${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h glibc-stdint.h i386/i386elf.h kos.h"
    ;;
x86_64-*-kos*)
    tm_file="${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h glibc-stdint.h i386/i386elf.h i386/x86-64.h kos.h"
    ;;
EOF
vi ${PREFIX}/binutils/src/gcc-6.2.0/gcc/config.gcc

# Create the following file with these contents:
echo <<EOF

#undef TARGET_KOS
#define TARGET_KOS 1

#define LIB_SPEC "-lc" /* link against C standard library */
#define STARTFILE_SPEC "crt0.o%s crti.o%s crtbegin.o%s"
#define ENDFILE_SPEC "crtend.o%s crtn.o%s"
#undef NO_IMPLICIT_EXTERN_C
#define NO_IMPLICIT_EXTERN_C 1

/* Additional predefined macros. */
#undef TARGET_OS_CPP_BUILTINS
#define TARGET_OS_CPP_BUILTINS()      \
  do {                                \
    builtin_define ("__kos__");       \
    builtin_define ("__KOS__");       \
    builtin_define ("__unix__");      \
    builtin_assert ("system=kos");   \
    builtin_assert ("system=unix");   \
    builtin_assert ("system=posix");  \
  } while(0);

EOF
vi ${PREFIX}/binutils/src/gcc-6.2.0/gcc/config/kos.h

# Find the switch "case "${host}" in" near the top of the file,
# alongside the comment "# Base decisions on target environment.",
# and add the following case:
echo <<EOF
  *-kos*)
    GLIBCXX_CHECK_COMPILER_FEATURES
    GLIBCXX_CHECK_LINKER_FEATURES
    GLIBCXX_CHECK_MATH_SUPPORT
    GLIBCXX_CHECK_STDLIB_SUPPORT
    ;;
EOF
vi ${PREFIX}/binutils/src/gcc-6.2.0/libstdc++-v3/crossconfig.m4

# Run "/opt/build-autoconf-2.64/bin/autoconf":
cd ${PREFIX}/binutils/src/gcc-6.2.0/libstdc++-v3
/opt/build-autoconf-2.64/bin/autoconf

# Find the switch "case ${host} in" (Around line 329) and
# add the following cases to it (Another existing case should
# be "aarch64*-*-elf | aarch64*-*-rtems*)")
# HINT: You may also orient yourself with the definition of
#       'extra_parts="$extra_parts crtbegin.o crtend.o crti.o crtn.o"'
#       variable definitions.
echo <<EOF
i[34567]86-*-kos*)
	extra_parts="$extra_parts crti.o crtbegin.o crtend.o crtn.o"
	tmake_file="$tmake_file i386/t-crtstuff t-crtstuff-pic t-libgcc-pic"
	;;
x86_64-*-kos*)
	extra_parts="$extra_parts crti.o crtbegin.o crtend.o crtn.o"
	tmake_file="$tmake_file i386/t-crtstuff t-crtstuff-pic t-libgcc-pic"
	;;
EOF
vi ${PREFIX}/binutils/src/gcc-6.2.0/libgcc/config.host

# Add kos to the switch "case $machine in", commented as
# "# Check for special fix rules for particular targets"
# The switch should then look something like this:
# >> case $machine in
# >>     *-kos* | \
# >>     i?86-*-cygwin* | \...
vi ${PREFIX}/binutils/src/gcc-6.2.0/fixincludes/mkfixinc.sh

# Replace the line "--with-sysroot=/opt/kos" with
#                  "--with-sysroot=${GCC_PREFIX}"
vi ${PREFIX}/binutils/make-build-binutils-i686-kos.sh
# Replace the line "--with-sysroot=/opt/kos" with
#                  "--with-sysroot=${GCC_PREFIX}"
vi ${PREFIX}/binutils/make-build-gcc-i686-kos.sh

# FINALLY! That's all the changes that need to be made! Phew...

# Run these two helper scripts to compile binutils and GCC
# NOTE: If you used different binutils/gcc versions, you may
#       need to adjust these scripts.
bash ${PREFIX}/binutils/make-build-binutils-i686-kos.sh
bash ${PREFIX}/binutils/make-build-gcc-i686-kos.sh
# Setup the build environment used by "${PREFIX}/shell.sh"
bash ${PREFIX}/binutils/make-bin.sh







# === MTOOLS ===
# While you're waiting for BINUTILS and GCC to compile, you may already do this step:
# Installing mtools (Required for creating/adding files to the KOS disk image used by qemu)
# Download mtools from here "https://www.gnu.org/software/mtools/manual/mtools.html"
# I'm using "mtools-4.0.18", but any version should work.
# Extract the archive to "${PREFIX}/binutils/src/mtools-4.0.18", so that
# the following file exists "${PREFIX}/binutils/src/mtools-4.0.18/configure"
mkdir ${PREFIX}/binutils/build-mtools
cd ${PREFIX}/binutils/build-mtools
../src/mtools-4.0.18/configure
make







# === MAGIC.DEE ===
# Based on your setup, you (may) need to adjust the paths used when
# KOS is build: Open "${PREFIX}/magic.dee" in your favorite text editor
# and find the line stating "/* Paths to used executables */"
# Adjust the paths used in the dictionary below according to your system.
# In addition, relace all following occurrances with the according replacements.
# >> "/cygdrive/e/c/kxs"    "${PREFIX}"
# >> "/opt/kos"             "${GCC_PREFIX}"
# >> "D:\\cygwin\\root"     <Your CYGWIN installation root directory> (WINDOWS HOST ONLY)
# WARNING: If your machine has a mounting point named "H:\\", you must
#          uncomment the line "local config_usbdisk = <none>;" in "magic.dee"
#          before running it, as it will otherwise attempt to mirror KOS disk
#          files under that path!

# === KOS ===
# Really, _really_ simple. - Just do this:
# NOTE: By default, this will compile everything and start QEMU
deemon ${PREFIX}/magic.dee




# Once done, you may run "${PREFIX}/shell.sh" to enter an interactive shell with
# gcc and friends re-mapped to the ones you've created in "${PREFIX}/binutils/bin"
# You may also run single commands by prefixing them with "${PREFIX}/shell.sh"

# You can now run KOS. - But that's no fun.
# To get a proper shell, look at "${PREFIX}/apps/busybox-readme"

